#lang racket

(require racket/include)
(include "connect4-test.rkt")

(define RED 1)
(define YELLOW 2)
(define EMPTY 0)
(define INFINITY 99999)

;; Task pregătitor
(define init-state
  (λ (height width player)
    ;TODO
    ;'your-code-here
    (list (make-list width (make-list height EMPTY)) player)))

(define init-board
  (λ (height width)
    ;TODO
    (make-list width (make-list height EMPTY))))

(define is-empty-board?
  (λ (board)
    (if (member #f (map (lambda (x) (if (or (member 1 x) (member 2 x));caut elemente de 1 sau 2 in lista
                           #f ;daca le gasesc insemna ca respectiva coloana nu este vida
                           #t)) board))
        #f ;daca am cel putin o coloana nevida inseamna ca boardul nu este vid
        #t)))

(define get-height
  (λ (board)
    (length (car board))))

(define get-width
  (λ (board)
    (length board)))

(define (getCol board x)
  (if (= x 0)
      (car board)
      (getCol (cdr board) (- x 1))))

(define (getEl list y)
  (if (= y 0)
      (car list)
      (getEl (cdr list) (- y 1))))

(define get-disc
  (λ (board position)
    (let ((x  (car position)) (y (cdr position)) (aux '() ) )
      (getEl (append (getCol board x) aux) y)
      )
    ))

(define get-player
  (λ (state)
    (second state)))

(define get-board
  (λ (state)
    (car state)))

(define state-test
  (let ((lvid (make-list 6 EMPTY))
        (col3 (list RED YELLOW RED RED YELLOW RED))
        (col4 (list YELLOW RED RED YELLOW RED EMPTY))
        (col5 (list RED EMPTY EMPTY EMPTY EMPTY EMPTY))
        (col6 (list YELLOW YELLOW RED EMPTY EMPTY EMPTY))
        (col7 (list YELLOW YELLOW EMPTY EMPTY EMPTY EMPTY)))
  (list (list lvid lvid col3 col4 col5 col6 col7) YELLOW)))

;; Task 1 a) - Determinarea acțiunilor posibile

(define (available board aux index)
  (if (null? board)
      aux
      (if (= (last (car board )) EMPTY)
             (available (cdr board) (cons index aux) (+ index 1))
             (available (cdr board) aux (+ index 1)))))

  
(define get-available-actions
  (λ (board)
    (reverse (available board '() 0))))
  
;; Task 1 b) - Aplicarea unei acțiuni

(define (getPos col index) ; se apeleaza cu index = 0
  (if (= (car col) 0)
      index
      (getPos (cdr col) (+ index 1))))

(define (putInPosition L pos value);pune pe coloana L din board valoarea lui value
  (append (take L pos ) (list value) (drop L (+ pos 1))))

(define (nextPlayer player)
  (if (= player 1)
      2
      1))

(define apply-action
  (λ (state action)
    (let ((board (car state)) (player (second state)))
      (list (append (take board action) (list (putInPosition (getCol board action) (getPos (getCol board action) 0) player )) (drop board (+ action 1))) (nextPlayer player)))
      ))

(define (applyHelper state actions)
  (if (null? actions)
      state
      (applyHelper (apply-action state (car actions)) (cdr actions)))) 
  
(define apply-actions
  (λ (state actions)
    (applyHelper state actions)))

;; Task 1 c) - Verificarea stării finale
(define (transpose board)
  (apply map list board))

(define (mirror board)
  (map reverse board)
  )

(define (isFull board)
  (if (member #f (map (lambda (x) (not (member EMPTY x))) board))
      #f
      #t))
  
(define (colWin L index player)
  (if (= (- (length L) index) 3)
      #f
      (if (and (= player (list-ref L (+ index 1))) (= player (list-ref L (+ index 2))) (= player (list-ref L (+ index 3))) (= (list-ref L index) player))
          #t
          (colWin L (+ index 1) player))))

(define (winColOrRow board player)
  (if (or (member #t (map (lambda (x) (colWin x 0 player)) board)) (member #t (map (lambda (x) (colWin x 0 player)) (transpose board))))
      #t
      #f))

(define (winDiag board col linie player)
  (if (= (- (min (length (car board)) (length board)) linie) 3)
    #f
   (if (and (= player (get-disc board (cons (+ col 1) (+ linie 1)))) (= player (get-disc board (cons (+ col 2) (+ linie 2))))
             (= player (get-disc board (cons (+ col 3) (+ linie 3))))  ( = (get-disc board (cons col linie)) player))
        #t
        (winDiag board (+ col 1) (+ linie 1) player)))
  )


(define (diagHelper board col linie player)
  (if (and (= player (get-disc board (cons (+ col 1) (+ linie 1)))) (= player (get-disc board (cons (+ col 2) (+ linie 2))))
             (= player (get-disc board (cons (+ col 3) (+ linie 3))))  ( = (get-disc board (cons col linie)) player))
        #t
        #f))
(define (diagHelper2 board col linie player)
  (if (and (= player (get-disc board (cons (+ col 1) (- linie 1)))) (= player (get-disc board (cons (+ col 2) (- linie 2))))
             (= player (get-disc board (cons (+ col 3) (- linie 3))))  ( = (get-disc board (cons col linie)) player))
        #t
        #f))

(define (checkDiag board x y player)
  (cond
     ((and (= (- (length board) x) 4) (= (- (length (car board)) y) 4)) (if (diagHelper board x y player) #t #f))
    ((and (= (- (length board) x) 4) (> (- (length (car board)) y) 4)) (if (diagHelper board x y player) #t (checkDiag board x (+ y 1) player)))
    ((and (> (- (length board) x ) 4) (= (- (length (car board)) y) 4)) (if (diagHelper board x y player) #t
                                                                           (checkDiag board (+ x 1) 0 player)) )
    ((> (- (length (car board)) y) 4) (if (diagHelper board x y player) #t
                                          (checkDiag board x (+ y 1) player)))
    (else #f)))

(define (checkDiag2 board x y player)
   (cond
      ((and (= (- (length board) x) 4) (= y 3) ) (if (diagHelper2 board x y player) #t #f) )
     ((and (= (- (length board) x) 4) (> y 3) ) (if (diagHelper2 board x y player) #t (checkDiag2 board x (- y 1) player)) )
    ((and (> (- (length board) x ) 4) (=  y 3)) (if (diagHelper2 board x y player) #t
                                                                           (checkDiag2 board (+ x 1) (- (length (car board)) 1) player)) )
    ((and (> (- (length board) x ) 4) (> y 3)) (if (diagHelper2 board x y player) #t (checkDiag2 board x (- y 1) player)))
    (else #f)))

(define is-game-over?
  (λ (state)
    (let ((board (car state)) (player (if (= (second state) 1) 2 1)))
      (if (or (winColOrRow board player) (checkDiag board 0 0 player) (checkDiag2 board 0 (- (length (car board)) 1) player))
          player
          (if (isFull board)
              3
              #f)))))

;; Task 2 - Euristică simplă

(define (randomHelper lista rand-gen)
  (list-ref lista (random (length lista) rand-gen)))
 
(define select-random-action
  (λ (state rand-gen)
   (apply-action state (randomHelper (get-available-actions (get-board state)) rand-gen))))

(define (getHelper state aux lista)
  (if (null? lista)
      aux
      (if (equal? (is-game-over? (apply-action state (car lista))) (second state))
      (getHelper state (cons (car lista) aux) (cdr lista))
      (getHelper state aux (cdr lista))
      )))

(define get-action
  (λ (state)
    (let* ((otherPlayer (if (= (second state) 1) 2 1)) (newState (reverse (cons otherPlayer (take state 1)))))
   (if (null? (getHelper state '() (get-available-actions (get-board state))))
       (car(getHelper newState '() (get-available-actions (get-board newState))))
       (car (getHelper state '() (get-available-actions (get-board state))))
       ))))

(define AI #f) ;Trebuie modificat în #t după ce se implementează play-game

(define (playHelper state strategy1 strategy2 index aux1 aux2 firstPlayer)
(cond
  ((equal? 3 (is-game-over? state)) 3)
  ((equal? firstPlayer (is-game-over? state)) aux1)
  ((and (not (equal? firstPlayer (is-game-over? state))) (not (equal? #f (is-game-over? state)))) aux2)
  ((even? index) (playHelper ((car strategy1) state (cdr strategy1)) strategy1 strategy2 (+ index 1) (append aux1 (list index)) aux2 firstPlayer) )
  (else (playHelper ((car strategy2) state (cdr strategy2)) strategy1 strategy2 (+ index 1) aux1 (append aux2 (list index)) firstPlayer))))
 


(define play-game
  (λ (state strategy1 strategy2)
    ;TODO
    (playHelper state strategy1 strategy2 0 '() '() (second state))))

;; Bonus 
(define evaluate
  (λ (state)
    ;TODO
    'your-code-here))

(define negamax
  (λ (state maxDepth)
    ;TODO
    'your-code-here))
     
;; SECȚIUNE DE TESTARE - NU modificați această linie!
;; ATENȚIE! Pentru a primi punctaj pe temă, NU modificați această secțiune!
;;
;; CHECK - TASK 0 - NU modificați această linie!
;; ATENȚIE! NU modificați această secțiune
(Task 0 : 20 puncte) ;;check-exp
(check-exp-part 'is-empty-board?1 .02 (is-empty-board? (init-board 7 7)) #t)
(check-exp-part 'is-empty-board?2 .02 (is-empty-board? (get-board state-test)) #f)
(check-exp-part 'is-empty-board?3 .02 (is-empty-board? (get-board (init-state 7 8 RED))) #t)
(check-exp-part 'get-height1 .02 (get-height (get-board (init-state 7 8 YELLOW))) 7)
(check-exp-part 'get-height2 .02 (get-height (get-board state-test)) 6)
(check-exp-part 'get-height3 .02 (get-height (init-board 10 14)) 10)
(check-exp-part 'get-width1 .02 (get-width (get-board (init-state 7 8 YELLOW))) 8)
(check-exp-part 'get-width2 .02 (get-width (get-board state-test)) 7)
(check-exp-part 'get-width3 .02 (get-width (init-board 10 14)) 14)
(check-exp-part 'get-width4 .01 (get-width (init-board 20 20)) 20)
(check-exp-part 'get-player1 .02 (get-player state-test) YELLOW)
(check-exp-part 'get-player2 .02 (get-player (init-state 15 7 RED)) RED)
(check-exp-part 'get-player3 .02 (get-player (init-state 10 8 YELLOW)) YELLOW)
(check-exp-part 'get-disc1 .05 (get-disc (get-board (init-state 10 8 YELLOW)) (cons 1 2)) EMPTY)
(check-exp-part 'get-disc2 .05 (get-disc (get-board state-test) (cons 1 2)) EMPTY)
(check-exp-part 'get-disc3 .05 (get-disc (get-board state-test) (cons 5 0)) YELLOW)
(check-exp-part 'get-disc4 .05 (get-disc (get-board state-test) (cons 5 1)) YELLOW)
(check-exp-part 'get-disc5 .05 (get-disc (get-board state-test) (cons 5 2)) RED)
(check-exp-part 'get-disc6 .05 (get-disc (get-board state-test) (cons 5 3)) EMPTY)
(check-exp-part 'get-disc7 .05 (get-disc (get-board state-test) (cons 2 3)) RED)
(check-exp-part 'get-disc8 .05 (get-disc (get-board state-test) (cons 2 5)) RED)
(check-exp-part 'get-disc9 .05 (get-disc (get-board state-test) (cons 3 0)) YELLOW)
(check-exp-part 'get-disc10 .05 (get-disc (get-board state-test) (cons 3 3)) YELLOW)
(check-exp-part 'get-disc11 .05 (get-disc (get-board state-test) (cons 6 0)) YELLOW)
(check-exp-part 'get-disc12 .05 (get-disc (get-board state-test) (cons 6 1)) YELLOW)
(check-exp-part 'get-disc13 .05 (get-disc (get-board state-test) (cons 6 5)) EMPTY)
(check-exp-part 'get-disc14 .05 (get-disc (get-board state-test) (cons 0 0)) EMPTY)
(check-exp-part 'get-disc15 .05 (get-disc (get-board state-test) (cons 6 5)) EMPTY)
;; SFÂRȘIT CHECK - TASK 0 - NU modificați această linie!
;;
;; CHECK - Task1 - NU modificați această linie!
;; ATENȚIE! NU modificați această secțiune!
(Task 1 : 50 puncte) ;;check-exp
(check-exp-part 'get-available-actions1 .04 (get-available-actions (get-board state-test)) '(0 1 3 4 5 6))
(check-exp-part 'get-available-actions2 .04 (get-available-actions (init-board 7 9)) '(0 1 2 3 4 5 6 7 8))
(check-exp-part 'get-available-actions3 .04 (get-available-actions (get-board (init-state 10 8 YELLOW))) '(0 1 2 3 4 5 6 7))
(check-exp-part 'get-available-actions4 .04 (get-available-actions (get-board (apply-action state-test 3))) '(0 1 4 5 6))
(check-exp-part 'get-available-actions5 .04 (get-available-actions (get-board (apply-actions state-test '(3 5 5 5)))) '(0 1 4 6))
(check-exp-part 'apply-action1 .02 (get-disc (get-board (apply-action state-test 3)) (cons 3 5)) YELLOW)
(check-exp-part 'apply-action2 .02 (get-player (apply-action state-test 3)) RED)
(check-exp-part 'apply-action3 .02 (get-player (apply-action (init-state 7 7 YELLOW) 1)) RED)
(check-exp-part 'apply-action4 .02 (get-disc (get-board (apply-action (init-state 6 6 RED) 1)) (cons 1 0)) RED)
(check-exp-part 'apply-action5 .02 (get-disc (get-board (apply-action (init-state 4 6 YELLOW) 2)) (cons 2 0)) YELLOW)
(check-exp-part 'apply-actions1 .02 (get-player (apply-actions (init-state 7 6 YELLOW) '(1 0 2 1 1 3 4 1 2 3))) YELLOW)
(check-exp-part 'apply-actions2 .02 (get-disc (get-board (apply-actions (init-state 6 6 RED) '(0 1 1 0 1 1 0 2 3))) (cons 0 2)) RED)
(check-exp-part 'apply-actions3 .02 (get-available-actions (get-board (apply-actions (init-state 6 6 RED) '(0 1 1 0 1 1 0 2 3 1 1)))) '(0 2 3 4 5))
(check-exp-part 'apply-actions4 .02 (get-available-actions (get-board (apply-actions (init-state 4 4 RED) '(1 1 1 1 0 0 0 0 2 2 2 2 3 3)))) '(3))
(check-exp-part 'apply-actions5 .02 (get-available-actions (get-board (apply-actions state-test '(1 1 1 1 1 1 0 0 0 0 0 0)))) '(3 4 5 6))
(check-exp-part 'apply-actions6 .02 (get-available-actions (get-board (apply-actions (init-state 4 4 RED) '(2 0 0 0 1 1 3 0 2 2 1 1 3 3 3 2)))) '())
(check-exp-part 'apply-actions7 .02 (get-available-actions (get-board (apply-actions (init-state 7 9 YELLOW) '(5 5 8 5 5 8 8 0 0 4 1 5 5 6 1 1 7 8 2 3 1 5 3 6 1 0 3 1 1 0 4 3 2)))) '(0 2 3 4 6 7 8))
(check-exp-part 'apply-actions8 .02 (get-available-actions (get-board (apply-actions (init-state 12 12 RED) '(9 6 8 10 3 1 1 3 7 5 11 11 7 3 11 0 5 6 7 9 5 3 0 10 5 10 10 6 1 7 0 3)))) '(0 1 2 3 4 5 6 7 8 9 10 11))
(check-exp-part 'apply-actions9 .02 (get-available-actions (get-board (apply-actions (init-state 15 15 YELLOW) '(8 10 0 13 9 2 9 6 1 5 14 6 3 3 11 5 13 7 13 13 3 13 10 8 9 11 1 12 12 6 4 5 2 12)))) '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14))
(check-exp-part 'apply-actions10 .02 (get-available-actions (get-board (apply-actions (init-state 8 15 RED) '(6 1 3 3 10 12 14 1 8 3 9 10 3 11 3 9 7)))) '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14))
(check-exp-part 'is-game-over?1 .02 (is-game-over? (apply-actions (init-state 4 4 RED) '(1 1 1 1 0 0 0 0 2 2 2 2 3))) RED)  
(check-exp-part 'is-game-over?2 .02 (is-game-over? (apply-actions (init-state 4 4 RED) '(1 1 1 1 0 0 0 0 2 2 2 2))) #f)
(check-exp-part 'is-game-over?3 .02 (is-game-over? (apply-actions (init-state 6 6 YELLOW) '(0 5 0 5 0 3 0))) YELLOW)
(check-exp-part 'is-game-over?4 .02 (is-game-over? state-test) #f)
(check-exp-part 'is-game-over?5 .02 (is-game-over? (apply-actions (init-state 4 4 RED) '(2 0 0 0 1 1 3 0 2 2 1 1 3 3 3 2))) 3)
(check-exp-part 'is-game-over?6 .04 (is-game-over? (apply-actions (init-state 8 15 RED) '(6 1 3 3 10 12 14 1 8 3 9 10 3 11 3 9 7))) RED)
(check-exp-part 'is-game-over?7 .04 (is-game-over? (apply-actions (init-state 8 15 YELLOW) '(6 8 5 2 1 4 9 7 12 9 12 9 8 3 3 10 6 7 11 6 12 13 9 6 0 6 10 7 1 10 7 12 13 14 8 11 7 7 7 5 7 9 2 11 1 3 11 12 3 12 11 9 11 1 8 9 12 14 5 3 2))) YELLOW)
(check-exp-part 'is-game-over?8 .04 (is-game-over? (apply-actions (init-state 8 8 RED) '(2 0 0 1 7 0 1 4 7 2 1 3 6 7 7 6 3 3 3 7 7 2 0 4 4 3 7 4))) YELLOW)
(check-exp-part 'is-game-over?9 .04 (is-game-over? (apply-actions (init-state 4 20 RED) '(16 13 8 13 17 14 5 0 15 13 18))) RED)
(check-exp-part 'is-game-over?10 .04 (is-game-over? (apply-actions (init-state 7 7 RED) '(4 4 0 1 1 4 1 1 1 5 3 1 4 6 4 2 0 5 6 3 6 5 0 6 3 1 5 3))) YELLOW)
(check-exp-part 'is-game-over?11 .04 (is-game-over? (apply-actions (init-state 5 8 RED) '(5 1 0 0 1 6 7 4 7 2 4 2 3 3 4 4 6 2 2 0 1 6 4 3))) YELLOW)
(check-exp-part 'is-game-over?12 .04 (is-game-over? (apply-actions (init-state 4 8 RED) '(0 0 0 0 1 1 1 1 2 3 2 2 2 3 4 3 3 4 4 4 5 5 5 5 7 6 6 6 6 7 7 7))) 3)
(check-exp-part 'is-game-over?13 .04 (is-game-over? (apply-actions (init-state 4 8 RED) '(1 0 5 3 7 0 0 1 6 0 7 1 7 6 5 2))) #f)
(check-exp-part 'is-game-over?14 .04 (is-game-over? (apply-actions (init-state 9 4 YELLOW) '(0 2 1 1 3 3 1 0 2 1 2 2 3 3 1 0 2 3 2 3 0))) YELLOW)
(check-exp-part 'is-game-over?15 .04 (is-game-over? (apply-actions (init-state 9 4 RED) '(1 1 1 1 3 0 0 2 1 1 2 2 0 2 1 1 3 2))) #f)
;; SFÂRȘIT CHECK - TASK 1 - NU modificați această linie!
;;
;; CHECK - Task2 - NU modificați această linie!
;; ATENȚIE! NU modificați această secțiune!
(Task 2 : 30 puncte) ;;check-exp
(define FUNCTIONS (list is-game-over? play-game get-available-actions apply-actions)) ;;check-exp
(check-in-part 'get-action1 .1 (get-action (apply-actions (init-state 9 4 YELLOW) '(0 0 3 3 3 2 2 1 2 2 3 1 0 1 0))) '(1 3))
(check-in-part 'get-action2 .1 (get-action (apply-actions (init-state 7 7 RED) '(1 4 2 4 6 2 1 4 1 0 5 3 6 0 5 1 5 0 4 2 1 5))) '(0 3))
(check-exp-part 'get-action3 .1 (get-action (apply-actions (init-state 10 6 YELLOW) '(3 4 3 3 4 5 4 2 3 2 3 3 2 4 2 3 3 2 4 4 0 0 3 4 1 0 3 1 0 1 5 2))) 1)
(check-exp-part 'get-action4 .05 (get-action (apply-actions (init-state 4 4 YELLOW) '(1 0 1 1 0 3 0 0 3 2 3 3))) 2)
(check-exp-part 'get-action5 .05 (get-action (apply-actions (init-state 4 4 RED) '(0 3 2 3 3 1 1 2 2))) 3)
(check-exp-part 'get-action6 .05 (get-action (apply-actions (init-state 8 8 RED) '(3 0 2 1 6 6 5 1))) 4)
(check-exp-part 'get-action7 .1 (get-action (apply-actions (init-state 10 5 YELLOW) '(1 2 4 1 3 0 3 2 2 1 2 1 2))) 1)
(check-exp-part 'get-action8 .1 (get-action (apply-actions (init-state 12 12 YELLOW) '(6 3 0 9 4 2 10 7 1 7 0 0 9 2 0 8 2 8 8 10 10 10 5 2 3 11 4 4 4 8 3 2 2 11 11 8 8))) 9)
(check-in-part 'get-action9 .1 (get-action (apply-actions (init-state 20 8 RED) '(3 2 2 1 2 7 2 5 0 6 1 5 0 5))) '(2 3))
(check-in-part 'get-action10 .1 (get-action (apply-actions (init-state 10 10 YELLOW) '(0 4 0 5 0 6 1 7 1 8 1 9 2 9 2 8 2))) '(0 1 2 3 4 5 6 7 8 9))
(check-exp-part 'play-game1 .05 (check-game AI (init-state 8 9 RED) (cons select-random-action (current-pseudo-random-generator)) (cons  select-random-action (current-pseudo-random-generator)) FUNCTIONS 1) #t) 
(check-exp-part 'play-game2 .05 (check-game AI (init-state 7 7 YELLOW) (cons select-random-action (current-pseudo-random-generator)) (cons  select-random-action (current-pseudo-random-generator)) FUNCTIONS 1) #t) 
(check-exp-part 'play-game3 .05 (check-game AI state-test (cons select-random-action (current-pseudo-random-generator)) (cons  select-random-action (current-pseudo-random-generator)) FUNCTIONS 1) #t) 
;; SFÂRȘIT CHECK - TASK 2 - NU modificați această linie!
;;
;; CHECK - BONUS - NU modificați această linie!
;; ATENȚIE! NU modificați această secțiune
(Bonus 3 : 20 puncte BONUS) ;;check-exp
(check-exp-part 'bonus1 .1 (check-play-game AI state-test (cons negamax 1) (cons negamax 3) FUNCTIONS 4 RED) #t)
(check-exp-part 'bonus2 .1 (check-play-game AI state-test (cons select-random-action (current-pseudo-random-generator)) (cons negamax 4) FUNCTIONS 4 RED) #t)
(check-exp-part 'bonus3 .1 (check-play-game AI (apply-actions (init-state 4 6 RED) '(1 0 1 1 0 3)) (cons select-random-action (current-pseudo-random-generator)) (cons negamax 5) FUNCTIONS 6 YELLOW) #t)
(check-exp-part 'bonus4 .1 (check-play-game AI (init-state 7 7 YELLOW) (cons select-random-action (current-pseudo-random-generator)) (cons negamax 3) FUNCTIONS 6 RED) #t)
(check-exp-part 'bonus5 .1 (check-play-game AI (apply-actions (init-state 9 6 YELLOW) '(1 2 0 3 1 0 2 4 5 0)) (cons select-random-action (current-pseudo-random-generator)) (cons negamax 3) FUNCTIONS 6 RED) #t)
(check-exp-part 'bonus6 .1 (check-play-game AI (init-state 8 8 RED) (cons negamax 1) (cons negamax 3) FUNCTIONS 6 YELLOW) #t)
(check-exp-part 'bonus7 .1 (check-play-game AI (init-state 4 6 RED) (cons negamax 1) (cons negamax 5) FUNCTIONS 4 YELLOW) #t)
(check-exp-part 'bonus8 .1 (check-play-game AI (init-state 5 7 RED) (cons negamax 2) (cons negamax 5) FUNCTIONS 2 YELLOW) #t)
(check-exp-part 'bonus9 .1 (check-play-game AI (apply-actions (init-state 10 8 RED) '(1 5 2 6 7 1 0 2 6 4 0 7 7)) (cons negamax 2) (cons negamax 4) FUNCTIONS 4 YELLOW) #t)
(check-exp-part 'bonus10 .1 (check-play-game AI (apply-actions (init-state 10 6 RED) '(1 0 1 1 0 3)) (cons select-random-action (current-pseudo-random-generator)) (cons negamax 3) FUNCTIONS 4 YELLOW) #t)
;; SFÂRȘIT CHECK - BONUS - NU modificați această linie!
;; SFÂRȘIT SECȚIUNE DE TESTARE
(sumar)
